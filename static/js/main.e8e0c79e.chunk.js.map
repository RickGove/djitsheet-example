{"version":3,"sources":["../../src/djitsheet/react-djit/djit.context.js","../../src/djitsheet/q.context.js","../../src/djitsheet/react-djit/use-djit.js","../../src/djitsheet/utils.js","../../src/djitsheet/q-table/excel-row.js","../../src/djitsheet/q-table/editable-cell.js","../../src/djitsheet/q-table/title-row.js","../../src/djitsheet/q-table/thead.js","../../src/djitsheet/q-table/add-row.js","../../src/djitsheet/q-table/cell-renderers/object.js","../../src/djitsheet/q-table/cell-renderers/array.js","../../src/djitsheet/q-table/data-col.js","../../src/djitsheet/q-table/data-row.js","../../src/djitsheet/q-table/index.js","../../src/djitsheet/style/index.js","../../src/djitsheet/index.js","../../src/index.js","App.js","index.js"],"names":["DjitContext","React","Djit","props","Sheets","useRef","useState","sheets","setSheets","getSheets","useCallback","useEffect","Object","context","Math","onChange","key","value","Data","createSheet","sheet","djit","data","id","newSheets","removeSheet","i","v","setTimeout","contextValue","QContext","useQ","QContextWrapper","sheetId","settings","sheetRef","showExcel","addColumns","columns","getContext","setSheet","djitc","useContext","options","localCells","setLocalCells","localHeaders","setLocalHeaders","selected","setSelected","actives","setActives","clipboard","setClipboard","errors","setErrors","meta","cells","output","lastCol","lastRow","utils","row","col","setter","cid","result","rows","cols","djitToArray","asArray","onBeforeSet","entry","postUpdate","setValue","newValue","element","setInstanceValue","type","getCell","cell","getValue","onCellUpdate","setInput","input","error","addCol","newCid","addRow","state","tableId","headers","actions","getActiveTable","isActiveTable","onTableActivate","isActivate","setHeader","onSelect","isSelected","onActivate","isActive","e","addSelected","copyCell","pasteCell","target","source","computedInput","sourceCid","targetCid","sourceCell","sAddress","tAddress","colDiff","rowDiff","computePasteValue","ExcelRow","q","extra","onClick","c","th","colName","width","tdProps","style","minWidth","maxWidth","className","EditableCell","active","onUpdate","inputRef","localValue","setLocalValue","localActive","setLocalActive","onDoubleClick","onSubmit","ref","onKeyUp","TitleRow","title","ec","colProps","QTHead","showHeaders","excelRowProps","excelRow","titleRowProps","titleRow","AddRow","rowAdder","ObjectCell","maxLen","items","entries","k","total","full","Array","ArrayCell","current","DataCol","header","isActivated","cellType","cellElement","cellValue","showLog","rendered","hProps","HeaderRender","render","document","DataRow","rowIndex","colIndex","QTable","mouseEnter","qdata","r","theadProps","thead","rowsEls","extraRow","tbody","tfoot","onMouseEnter","Wrapper","styled","Main","ExampleComponent","App","text","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e8e0c79e.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from 'react'\nimport djit from 'djit'\n\nexport const DjitContext = React.createContext()\n\nconst Djit = (props) => {\n  const sheetId = 'sheet1'\n  const Sheets = useRef()\n  const [sheets, setSheets] = useState({})\n\n  const getSheets = useCallback(() => {\n    return Sheets.current || {}\n  }, [Sheets])\n\n  useEffect(() => {\n    Sheets.current = sheets\n\n    Object.entries(sheets).forEach(([i, sheet]) => {\n      if (sheetId) {\n      } else {\n      }\n    })\n  }, [sheets])\n\n  const context = { Math }\n\n  const onChange = (key, value, Data) => {}\n\n  const createSheet = useCallback(\n    (id, data, options) => {\n      const sheet = djit(data, {\n        context,\n        onChange,\n        id,\n        ...{\n          ...options\n        }\n      })\n      let newSheets\n      setSheets((v) => {\n        newSheets = { ...v, [id]: sheet }\n        return newSheets\n      })\n    },\n    [getSheets]\n  )\n\n  const removeSheet = useCallback((id) => {\n    let newSheets\n    setSheets((v) => {\n      newSheets = {\n        ...Object.entries(v)\n          .filter(([k]) => k !== id)\n          .reduce((a, [i, v]) => ({ ...a, [i]: v }), {})\n      }\n      return newSheets\n    })\n\n    setTimeout(() => {\n      newSheets &&\n        Object.entries(newSheets).length &&\n        Object.entries(newSheets).forEach(([id, sheet]) => {\n          sheet.sheetsUpdated()\n        })\n    }, 0)\n  }, [])\n\n  const contextValue = {\n    sheets,\n    createSheet,\n    removeSheet,\n    getSheets,\n    Sheets\n  }\n\n  return (\n    <DjitContext.Provider value={contextValue}>\n      {props.children}\n    </DjitContext.Provider>\n  )\n}\n\nexport default Djit\n","import React, { useEffect, useState, useCallback } from 'react'\nimport { useDjit } from './react-djit'\nimport { djitToArray } from './utils'\nimport * as djit from 'djit'\n\nexport const QContext = React.createContext()\nexport const useQ = () => React.useContext(QContext)\n\nconst QContextWrapper = (props) => {\n  const { id: sheetId, data, settings = {}, sheetRef, onChange } = props\n  const {\n    showExcel = true,\n    addColumns = true,\n    columns = [],\n    context,\n    getContext\n  } = settings\n\n  const [sheet, setSheet] = useState()\n  const djitc = useDjit()\n\n  const options = {\n    showExcel,\n    addColumns\n  }\n\n  const [localCells, setLocalCells] = React.useState({}) // djit cell values\n  const [localHeaders, setLocalHeaders] = React.useState(columns) // table headers\n\n  const [selected, setSelected] = React.useState([]) // selected cells\n  const [actives, setActives] = React.useState([]) // active cells\n\n  const [clipboard, setClipboard] = React.useState([])\n\n  const [errors, setErrors] = useState({})\n\n  const { rows, cols, result: asArray } = React.useMemo(\n    () => djitToArray(localCells, true),\n    [localCells]\n  )\n  const onBeforeSet = (key, entry, postUpdate) => {\n    if (entry && React.isValidElement(entry.value)) {\n      const setValue = (newValue) => {\n        if (entry.value.props.setValue) {\n          entry.value.props.setValue(newValue)\n        } else\n          postUpdate((v) => ({\n            element: React.cloneElement(v.element, {\n              value:\n                typeof newValue === 'function' ? newValue(v.value) : newValue\n            }),\n            value: typeof newValue === 'function' ? newValue(v.value) : newValue\n          }))\n      }\n      const setInstanceValue = (newValue) => {\n        postUpdate((v) => ({\n          element: React.cloneElement(v.element, {\n            value: typeof newValue === 'function' ? newValue(v.value) : newValue\n          }),\n          value: typeof newValue === 'function' ? newValue(v.value) : newValue\n        }))\n      }\n      return {\n        postUpdate,\n        setValue,\n        ...entry,\n        element: React.cloneElement(entry.value, {\n          postUpdate,\n          setValue,\n          setInstanceValue\n        }),\n        type: 'react',\n        value:\n          entry.value && entry.value.props\n            ? entry.value.props.value\n            : entry.value\n      }\n    }\n    if (\n      entry &&\n      entry.value &&\n      React.isValidElement(entry.value.element) &&\n      entry.type === 'react' &&\n      !entry.element\n    ) {\n      return {\n        ...entry,\n        element: React.cloneElement(entry.value.element, {\n          value: entry.value.value && entry.value.value.value\n        }),\n        value: entry.value\n      }\n    }\n    if (\n      entry &&\n      entry.type === 'react' &&\n      !React.isValidElement(entry.element)\n    ) {\n      const { type, ...rest } = entry || {}\n      return rest\n    }\n    if (\n      options &&\n      options.onBeforeSet &&\n      typeof options.onBeforeSet === 'function'\n    ) {\n      return options.onBeforeSet(key, entry, postUpdate)\n    }\n    return {\n      // postUpdate,\n      ...entry\n    }\n  }\n\n  const getCell = (value, cell) => {\n    if (cell && cell.type === 'react' && React.isValidElement(cell.element))\n      return {\n        type: 'react',\n        value: {\n          type: 'react-value',\n          element: cell.element,\n          value:\n            cell.value && cell.value.type === 'react-value'\n              ? cell.value.value\n              : cell.value\n        }\n      }\n    else if (cell && cell.type === 'react') {\n      const { type, ...rest } = cell\n      return rest\n    }\n\n    return cell\n  }\n\n  const getValue = (value, cell) => {\n    if (value?.type === 'react-value') {\n      return value.value\n    }\n    return value\n  }\n\n  const onCellUpdate = useCallback(\n    (cid, cell) => {\n      setLocalCells((v) => ({ ...v, [cid]: cell }))\n      if (onChange && typeof onChange === 'function') onChange(cid, cell)\n    },\n    [sheetId]\n  )\n  useEffect(() => {\n    const options = {\n      context,\n      getContext,\n\n      // Subscribe to onChange\n      onChange: onCellUpdate,\n      onBeforeSet,\n      getCell,\n      getValue\n    }\n    if (!djitc.sheets[sheetId]) {\n      const baseData = [['', '', '', '', ''], [''], [''], ['']]\n\n      djitc.createSheet(\n        sheetId,\n        (data && data.length && data) || baseData,\n        options\n      )\n      return () => {\n        djitc.removeSheet(sheetId)\n      }\n    } else if (sheetId && sheetId in djitc.sheets) {\n      djitc.sheets[sheetId].setOnChange(onCellUpdate)\n      return () => {\n        djitc.removeSheet(sheetId)\n      }\n    }\n  }, [sheetId, onCellUpdate])\n\n  useEffect(() => {}, [sheet])\n\n  useEffect(() => {\n    if (djitc?.sheets?.[sheetId]) {\n      setSheet(djitc.sheets[sheetId])\n      if (typeof sheetRef === 'function')\n        sheetRef(sheetId, djitc.sheets[sheetId])\n\n      const cells = djitc.sheets[sheetId].Data\n      Object.entries(cells).map(([cid, cell]) =>\n        setLocalCells((v) => ({ ...v, [cid]: cell }))\n      )\n    }\n  }, [djitc?.sheets, sheetId, sheet])\n\n  // handle 'active table' to avoid deleting/modifying cells in tables not interacted with\n  const onTableActivate = (isActivate) => {\n    if (isActivate) props.setActiveTable(props.tableId)\n    else if (props.getActiveTable() === props.tableId) props.setActiveTable('')\n  }\n\n  // on cell selected (click / keyboard navigate)\n  const onSelect = (cid, isSelected) => {\n    setSelected((v) => [\n      ...((!isSelected && selected) || []).filter((e) => cid),\n      ...(isSelected ? [cid] : [])\n    ])\n    if (actives.length && actives[0] !== cid && isSelected) {\n      setActives([])\n    }\n  }\n\n  const addSelected = (cid, isSelected) => {}\n\n  const onActivate = (cid, isActive) => {\n    setActives(\n      (v) =>\n        false || [\n          ...(actives || []).filter((e) => e !== cid),\n          ...(isActive ? [cid] : [])\n        ]\n    )\n  }\n\n  const setInput = (cid, input) => {\n    try {\n      setErrors((v) => ({\n        ...v,\n        [cid]: null\n      }))\n      sheet[cid] = input\n    } catch (error) {\n      setErrors((v) => ({\n        ...v,\n        [cid]: error\n      }))\n    }\n  }\n\n  const addCol = React.useCallback(() => {\n    const newCid = djit.utils.addressToName({ col: cols, row: 0 })\n    setInput(newCid, '')\n  }, [cols, sheet])\n\n  const addRow = React.useCallback(() => {\n    const newCid = djit.utils.addressToName({ col: 0, row: rows })\n    setInput(newCid, '')\n  }, [rows, sheet])\n\n  const copyCell = (cid) => {\n    setClipboard((v) => [cid, ...v.filter((c) => cid !== c)])\n  }\n\n  const computePasteValue = ({ sourceCid, targetCid, sourceCell }) => {\n    const sAddress = djit.utils.nameToAddress(sourceCid)\n    const tAddress = djit.utils.nameToAddress(targetCid)\n    const colDiff = tAddress.col - sAddress.col\n    const rowDiff = tAddress.row - sAddress.row\n    const computed = djit.addressModifier(colDiff, rowDiff, sourceCell.input)\n\n    return computed\n  }\n\n  const pasteCell = (target) => {\n    const source = clipboard[0]\n    const sourceCell = localCells[source]\n    const computedInput = computePasteValue({\n      sourceCid: source,\n      targetCid: target,\n      sourceCell\n    })\n    setInput(target, computedInput)\n  }\n\n  const state = {\n    tableId: props.tableId,\n    headers: localHeaders,\n\n    cells: localCells,\n    actives,\n    selected,\n    errors,\n    rows,\n    cols,\n\n    asArray\n  }\n  const actions = {\n    getActiveTable: () => props.getActiveTable(),\n    isActiveTable: () => props.getActiveTable() === props.tableId,\n    onTableActivate,\n    setHeader: (col, newValue) => {\n      setLocalHeaders((v) => [\n        ...v.filter((e, i) => i < col),\n        { ...(v.find((e, i) => i === col) || {}), ...newValue },\n        ...v.filter((e, i) => i > col)\n      ])\n    },\n\n    addCol,\n    addRow,\n\n    setActives,\n    setSelected,\n    onSelect,\n    onActivate,\n    addSelected,\n    copyCell,\n    pasteCell,\n\n    setInput\n  }\n\n  if (!sheetId) {\n    return (\n      <div>\n        Error: <code>id</code> is required\n      </div>\n    )\n  }\n\n  const contextValue = { actions, options, state, djitc }\n\n  return (\n    <QContext.Provider value={contextValue}>{props.children}</QContext.Provider>\n  )\n}\n\nexport default QContextWrapper\n","import { useContext } from 'react'\nimport { DjitContext } from './djit.context'\n\nexport const useDjit = (options) => useContext(DjitContext)\nexport default useDjit\n","import { utils } from 'djit'\n\nexport const keyCodes = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  DELETE: 46,\n  META: 91\n}\n\nexport const djitToArray = (data, meta = false) => {\n  const cells = Object.entries(data)\n  const output = []\n  let lastCol = 0\n  let lastRow = 0\n  cells.forEach(([key, value]) => {\n    const { row, col } = utils.nameToAddress(key)\n    if (!output[row]) {\n      if (output.length < row + 1) {\n        let setter = output.length\n        while (output.length < row + 1) {\n          output[setter++] = []\n        }\n      }\n    }\n    if (row > lastRow) lastRow = row\n    if (col > lastCol) lastCol = col\n    output[row][col] = {\n      cid: key,\n      ...value\n    }\n  })\n\n  for (let row = 0; row < lastRow + 1; row++) {\n    for (let col = 0; col < lastCol + 1; col++) {\n      if (!output[row]) {\n        output[row] = []\n      }\n\n      if (!output[row][col]) {\n        const cid = utils.addressToName({ col, row })\n        output[row][col] = { cid }\n      }\n    }\n  }\n  if (meta)\n    return {\n      result: output,\n      rows: lastRow + 1,\n      cols: lastCol + 1\n    }\n  return output\n}\n","import React from 'react'\nimport { useQ } from '../q.context'\nimport * as djit from 'djit'\n\nconst ExcelRow = (props) => {\n  const { headers } = props\n  const q = useQ()\n  const { addColumns } = q.options\n  const { addCol } = q.actions\n  const { cols: lastCol } = q.state\n\n  const extra = React.useMemo(\n    () => (addColumns ? <td onClick={addCol}>+</td> : null),\n    [addColumns, addCol]\n  )\n\n  const cols = React.useMemo(() => {\n    const cols = []\n    for (let c = 0; c < lastCol; ++c) {\n      const th = (headers || [])[c]\n      const colName = djit.utils.numberToLetters(c + 1)\n      const width = th && th.width ? th.width : ''\n      const tdProps = {\n        key: 'excel-' + colName,\n        ...(th && th.width ? { width: th.width } : {}),\n        style: {\n          width,\n          minWidth: width,\n          maxWidth: width\n        }\n      }\n      const col = <td {...tdProps}>{colName}</td>\n      cols.push(col)\n    }\n    return cols\n  }, [lastCol, headers])\n\n  const thead = (\n    <tr className='excel-row'>\n      <td className='corner' />\n      {cols}\n      {extra}\n    </tr>\n  )\n\n  return thead\n}\n\nexport default ExcelRow\n","import React, { useState, useRef, useEffect } from 'react'\n\nconst EditableCell = (props) => {\n  const { input, value, selected, active, onActivate, onUpdate } = props\n\n  const inputRef = useRef()\n  const [localValue, setLocalValue] = useState(input)\n  const [localActive, setLocalActive] = useState(false)\n\n  const onSubmit = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  const onChange = (e) => {\n    setLocalValue(e.target.value)\n  }\n\n  const onDoubleClick = (e) => {\n    if (!active) {\n      onActivate(true)\n    }\n  }\n\n  useEffect(() => {\n    if (active) {\n      inputRef.current.focus()\n      inputRef.current.selectionStart = inputRef.current.selectionEnd = `${localValue}`.length\n    }\n  }, [active, localValue])\n\n  useEffect(() => {\n    if (!active && localActive && input !== localValue) {\n      onUpdate(localValue)\n    }\n  }, [active, localActive, input, localValue, onUpdate])\n\n  useEffect(() => {\n    if (active !== localActive) {\n      setLocalActive(active)\n    }\n  }, [active, localActive, localValue])\n\n  const onKeyUp = (e) => {\n    if (e.keyCode === 13) {\n      setTimeout(() => onActivate(false), 60)\n      onUpdate(localValue)\n      inputRef.current.blur()\n      e.stopPropagation()\n    }\n  }\n\n  return (\n    <div\n      onDoubleClick={onDoubleClick}\n      className={\n        'ec' + (selected ? ' selected' : '') + (active ? ' active' : '')\n      }\n    >\n      <aside>\n        <form onSubmit={onSubmit}>\n          <input\n            ref={inputRef}\n            type='text'\n            onChange={onChange}\n            onKeyUp={onKeyUp}\n            value={localValue || ''}\n          />\n        </form>\n      </aside>\n      <output>{value}</output>\n    </div>\n  )\n}\n\nexport default EditableCell\n","import React from 'react'\nimport * as djit from 'djit'\nimport EditableCell from './editable-cell'\n\nconst TitleRow = (props) => {\n  const {\n    showExcel,\n    addColumns,\n    lastCol,\n    headers,\n    selected,\n    actives,\n    onActivate,\n    onSelect,\n    setHeader\n  } = props\n\n  const th = React.useMemo(\n    () => (showExcel ? <th className='corner excel'>&nbsp;</th> : null),\n    [showExcel]\n  )\n\n  const extra = React.useMemo(\n    () => (addColumns ? <td className='end-col' /> : null),\n    [addColumns]\n  )\n\n  const cols = []\n  for (let c = 0; c < lastCol + 1; ++c) {\n    const th = (headers || [])[c]\n    const colName = djit.utils.numberToLetters(c + 1)\n    const cid = `${colName}#Title`\n    const isSelected = selected && selected.includes(cid)\n    const isActive = actives && actives.includes(cid)\n\n    const props = {\n      input: (th && th.title) || '',\n      value: (th && th.title) || <em>Unnamed</em>,\n      selected: isSelected,\n      active: isActive,\n      onActivate: (e) => {\n        onActivate(cid, !isActive)\n      },\n      onSelect: (e) => {\n        onSelect(cid, !isSelected)\n      },\n      onUpdate: (e) => {\n        setHeader(c, { title: e })\n      }\n    }\n    const ec = <EditableCell {...props} />\n    const colProps = {\n      key: 'title-' + colName,\n      className: 'etd',\n      ...(th && th.width ? { width: th.width } : {})\n    }\n    const col = <th {...colProps}>{ec}</th>\n    cols.push(col)\n  }\n\n  return (\n    <tr className='head-row'>\n      {th}\n      {cols}\n      {extra}\n    </tr>\n  )\n}\n\nexport default TitleRow\n","import React from 'react'\nimport { useQ } from '../q.context'\nimport ExcelRow from './excel-row'\nimport TitleRow from './title-row'\n\nconst QTHead = (props) => {\n  const {\n    onUpdate,\n    onSelect,\n    onActivate,\n\n    showExcel,\n    showHeaders,\n    addColumns,\n    lastCol,\n    selected,\n    actives\n  } = props\n  const q = useQ()\n\n  const { headers } = q.state\n  const { addCol, setHeader } = q.actions\n\n  const excelRowProps = {\n    addColumns,\n    addCol,\n    lastCol,\n    selected,\n    actives,\n    headers\n  }\n\n  const excelRow = showExcel && <ExcelRow {...excelRowProps} />\n\n  const titleRowProps = {\n    showExcel,\n    addColumns,\n    lastCol,\n    onUpdate,\n    onSelect,\n    onActivate,\n    setHeader,\n    headers,\n    selected,\n    actives\n  }\n  const titleRow = showHeaders && <TitleRow {...titleRowProps} />\n\n  return (\n    <thead>\n      {excelRow}\n      {titleRow}\n    </thead>\n  )\n}\n\nexport default QTHead\n","import React from 'react'\n\nconst AddRow = (props) => {\n  const { cols: lastCol, addColumns, showExcel, addRow } = props\n  const cols = []\n\n  for (let c = 0; c < lastCol; c++) {\n    const key = 'end-row-' + c\n    const col = <td key={key} />\n\n    cols.push(col)\n  }\n\n  if (addColumns) {\n    cols.push(<td key='end-row-end-col' />)\n  }\n\n  const rowAdder = showExcel ? (\n    <td onClick={addRow} className='excel'>\n      +\n    </td>\n  ) : null\n\n  return (\n    <tr className='end-row'>\n      {rowAdder}\n      {cols}\n    </tr>\n  )\n}\nexport default AddRow\n","import React from 'react'\nimport ArrayCell from './array'\n\nconst ObjectCell = (props) => {\n  const { value, maxLen = 34 } = props\n\n  const items = []\n  const entries = (value && Object.entries(value)) || []\n\n  if (entries && entries.length) {\n    entries.forEach(([k, v], i) => {\n      const total = items.join(', ').length\n      const current = Array.isArray(v) ? (\n        <ArrayCell {...{ value: v, maxLen: maxLen - total }} />\n      ) : typeof v === 'object' ? (\n        <ObjectCell {...{ value: v, maxLen: maxLen - total }} />\n      ) : (\n        `${\n          (v &&\n            v.toString &&\n            typeof v.toString === 'function' &&\n            v.toString()) ||\n          v\n        }`\n      )\n      const full = `${k}: ${current}`\n      const len = full.length\n      if (total + len < maxLen || !items.length) {\n        items.push(full)\n      }\n    })\n  }\n\n  return `{ ${items.join(', ')}${\n    items.length < entries.length ? ', ...' : ''\n  } }`\n}\n\nexport default ObjectCell\n","import React from 'react'\nimport ObjectCell from './object'\n\nconst ArrayCell = (props) => {\n  const { value, maxLen = 34 } = props\n\n  const items = []\n\n  if (value && value.length) {\n    value.forEach((v, i) => {\n      const total = items.join(', ').length\n      const current = Array.isArray(v) ? (\n        <ArrayCell {...{ value: v, maxLen: maxLen - total }} />\n      ) : typeof v === 'object' ? (\n        <ObjectCell {...{ value: v, maxLen: maxLen - total }} />\n      ) : (\n        `${\n          (v &&\n            v.toString &&\n            typeof v.toString === 'function' &&\n            v.toString()) ||\n          v\n        }`\n      )\n\n      const len = current.length\n      if (total + len < maxLen || !items) {\n        items.push(current)\n      }\n    })\n  }\n\n  return `[ ${items.join(', ')}${items.length < value.length ? ', ...' : ''} ]`\n}\n\nexport default ArrayCell\n","import React, { useCallback } from 'react'\nimport { useQ } from '../q.context'\nimport EditableCell from './editable-cell'\nimport ArrayCell from './cell-renderers/array'\nimport ObjectCell from './cell-renderers/object'\n\nconst DataCol = (props) => {\n  const { cid, header } = props\n\n  const q = useQ()\n  const error = q.state.errors[cid]\n  const selected = q.state.selected.includes(cid)\n  const active = q.state.actives.includes(cid)\n  const onSelect = useCallback(\n    (isSelected) => {\n      q.actions.onSelect(cid, isSelected)\n    },\n    [cid, q.actions]\n  )\n  const onActivate = (isActivated) => q.actions.onActivate(cid, isActivated)\n  const addSelected = (isSelected) => q.actions.addSelected(cid, isSelected)\n  const { postUpdate, ...cell } = q.state.cells[cid] || {}\n  const value =\n    typeof cell.value === 'string' ||\n    typeof cell.value === 'number' ||\n    Array.isArray(cell.value)\n      ? cell.value\n      : typeof cell.value === 'object' && Object.keys(cell.value).length\n      ? cell.value\n      : ''\n\n  const input = cell.input\n\n  const onUpdate = (newValue) => {\n    q.actions.setInput(cid, newValue)\n    onActivate(false)\n  }\n\n  const onClick = (e) => {\n    if (e.altKey) {\n      e.preventDefault()\n      e.stopPropagation()\n      return\n    }\n    if (e.shiftKey) {\n      e.preventDefault()\n      e.stopPropagation()\n      document.getSelection().removeAllRanges()\n\n      if (!selected) addSelected(true)\n      addSelected(false)\n    } else if (!selected) onSelect(true)\n  }\n\n  const cellType = cell.type\n  const cellElement = cell.element\n\n  const showLog = false\n  const cellValue = React.useMemo(\n    () =>\n      showLog || value instanceof Promise ? (\n        <span className='pending'>Pending...</span>\n      ) : cellType === 'react' && cellElement ? (\n        React.cloneElement(cellElement, { value: value.value })\n      ) : (\n        value\n      ),\n    [value, cellElement, cellType, showLog]\n  )\n\n  const output = React.useMemo(\n    () =>\n      header && header.compute && typeof header.compute === 'function'\n        ? header.compute(value, cell.input, cell, postUpdate)\n        : cellValue,\n    [header, cellValue, cell, postUpdate, value]\n  )\n\n  const rendered = React.useMemo(\n    () =>\n      header && header.render && typeof header.render === 'function'\n        ? ((v) => {\n            if (header && header.type === 'component') {\n              const hProps = {\n                cid,\n                output,\n                value,\n                input,\n                postUpdate\n              }\n              const HeaderRender = header.render\n\n              return <HeaderRender {...hProps} />\n            }\n\n            const render = header.render(v)\n            if (render && typeof render === 'function')\n              return render(cid, cell, postUpdate)\n            return render\n          })(output)\n        : output,\n    [header, output, cell, postUpdate, value, cid, input]\n  )\n\n  const result = React.useMemo(\n    () =>\n      Array.isArray(rendered) ? (\n        <ArrayCell {...{ value: rendered }} />\n      ) : cellType === 'component' ? (\n        <span>&lt;{cell.component} /&gt;</span>\n      ) : !React.isValidElement(rendered) && typeof rendered === 'object' ? (\n        <ObjectCell {...{ value: rendered }} />\n      ) : (\n        rendered\n      ),\n    [cell.component, cellType, rendered]\n  )\n\n  const onKeyUp = (e) => {\n    if (e.keyCode === 13 && active) {\n      onActivate(false)\n    }\n  }\n\n  const td = (\n    <td className={'etd' + (error ? ' error' : '')} onClick={onClick}>\n      <EditableCell\n        error={error}\n        onKeyUp={onKeyUp}\n        onActivate={onActivate}\n        active={active}\n        selected={selected}\n        value={result}\n        input={input}\n        onUpdate={onUpdate}\n        header={header}\n      />\n    </td>\n  )\n\n  return td\n}\n\nexport default DataCol\n","import React from 'react'\nimport DataCol from './data-col'\n\nconst DataRow = (props) => {\n  const { row, rowIndex, showExcel, addColumns } = props\n\n  const cols = React.useMemo(\n    () =>\n      false ||\n      row.map((cid, colIndex) => (\n        <DataCol key={`data-row-${cid}`} cid={cid} colIndex={colIndex} />\n      )),\n    [row]\n  )\n  if (addColumns) cols.push(<td key='end-col' />)\n\n  const th = React.useMemo(() => {\n    if (showExcel) {\n      return <th className='excel'>{rowIndex + 1}</th>\n    }\n  }, [showExcel, rowIndex])\n\n  return (\n    <tr>\n      {th}\n      {cols}\n    </tr>\n  )\n}\n\nexport default DataRow\n","import React from 'react'\nimport { useQ } from '../q.context'\nimport QTHead from './thead'\nimport AddRow from './add-row'\nimport DataRow from './data-row'\n\nconst QTable = (props) => {\n  const { mouseEnter } = props\n  const qdata = useQ()\n\n  const { headers, selected, actives, cols, asArray } = qdata.state\n\n  const { setHeader, onSelect, onActivate, addRow } = qdata.actions\n\n  const onUpdate = () => {}\n  const addColumns = true\n  const addRows = true\n\n  const showExcel = true\n  const showHeaders = true\n\n  const data = asArray.map((r) => r.map(({ cid }) => cid))\n\n  const theadProps = {\n    onUpdate,\n    onSelect,\n    onActivate,\n    showExcel,\n    showHeaders,\n    addColumns,\n    setHeader,\n    lastCol: cols - 1,\n    headers,\n    selected,\n    actives\n  }\n  const thead = <QTHead {...theadProps} />\n\n  const rowsEls = React.useMemo(\n    () =>\n      false ||\n      data.map((r, rowIndex) => (\n        <DataRow\n          key={'data-row-' + r + rowIndex}\n          addColumns={addColumns}\n          showExcel={showExcel}\n          {...{ row: r, rowIndex }}\n        />\n      )),\n    [addColumns, data, showExcel]\n  )\n\n  const extraRow = addRows ? (\n    <AddRow\n      showExcel={showExcel}\n      addRow={addRow}\n      addColumns={addColumns}\n      cols={cols}\n    />\n  ) : null\n\n  const tbody = (\n    <tbody>\n      {rowsEls}\n      {extraRow}\n    </tbody>\n  )\n\n  const tfoot = <tfoot />\n\n  const table = (\n    <table className='magic-table' onMouseEnter={mouseEnter}>\n      {thead}\n      {tbody}\n      {tfoot}\n    </table>\n  )\n\n  return table\n}\n\nexport default QTable\n","import styled from 'styled-components'\n\nconst editableCellStyle = `\n.ec {\n  cursor: default;\n  position: relative;\n  border: 1px solid transparent;\n  display: flex;\n  min-height: 20px;\n  &:hover {\n    background: var(--data-hover-bg);\n  }\n  &:active {\n    background: var(--data-active-bg);\n  }\n  > output {\n    padding: var(--padding);\n    flex: 1 1 auto;\n    font-variant-numeric: tabular-nums;\n  }\n  > aside {\n    position: absolute;\n    top: 0; bottom: 0;\n    right: 0; left: 0;\n    opacity: 0;\n    pointer-events: none;\n    > form {\n      > input {\n        font-size: inherit;\n        padding: var(--padding);\n        outline: none;\n        display: block;\n        height: 100%;\n        width: 100%;\n        border: none;\n        background: none;\n        top: -1px;\n        position: relative;\n        &:hover, &:active {\n        box-shadow: none;\n        }\n      }\n    }\n  }\n  > output,\n  > aside > form > input {\n    font-size: 13px;\n    line-height: 14px;\n    font-variant-numeric: tabular-nums;\n    font-family: var(--text-font);\n    color: var(--color);\n  }\n  &.selected {\n    border: 1px solid var(--border-color);\n  }\n  &.active {\n    background: var(--data-active-bg);\n    box-shadow: inset 1px 3px 4px rgba(0, 0, 0, 0.10), inset 1px 1px 2px rgba(0, 0, 0, 0.10), ;\n    > output {\n      opacity: 0;\n      pointer-events: none;\n    }\n    > aside {\n      opacity: 1;\n      pointer-events: all;\n      > form > input {\n      }\n    }\n  }\n}\n&.error {\n  > .ec {\n    border-color: var(--error-color);\n    background: var(--data-active-bg);\n    box-shadow: inset 1px 3px 4px rgba(0, 0, 0, 0.10), inset 1px 1px 2px rgba(0, 0, 0, 0.10), ;\n    > output {\n      opacity: 0;\n      pointer-events: none;\n    }\n    > aside {\n      opacity: 1;\n      pointer-events: all;\n      > form > input {\n      }\n    }\n  }\n}\n\n`\nexport const Wrapper = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,700;0,800;1,400&display=swap');\n  --padding: 3px 5px;\n  --border-color: hsla(214, 82%, 51%, 1);\n  --error-color: hsla(14, 82%, 51%, 1);\n\n  --background: hsla(214, 1%, 99%, 1);\n  --color: hsla(218, 13%, 12%, 1);\n\n  --outer-border-color: hsla(240, 5%, 90%, 1);\n\n  --excel-bg: hsla(240, 5%, 98%, 1);\n  --excel-hover-bg: hsla(240, 5%, 97%, 1);\n  --excel-text-color: hsla(240, 5%, 24%, 1);\n  --excel-cell-separator: hsla(240, 5%, 88%, 1);\n\n  --data-cell-separator: hsla(240, 5%, 92%, 1);\n  --data-hover-bg: hsla(214, 82%, 51%, 0.03);\n  --data-active-bg: hsla(214, 82%, 31%, 0.08);\n\n  --text-font: 'Open Sans', sans-serif;\n\n  --excel-col-width: 30px;\n  --end-col-width: 20px;\n\n  overflow-x: auto;\n  font-family: var(--text-font);\n\n  &.theme-dark {\n    --color: hsla(218, 13%, 92%, 1);\n    --background: hsla(240, 5%, 21%, 1);\n\n    --excel-bg: hsla(240, 5%, 18%, 1);\n    --excel-hover-bg: hsla(240, 5%, 21%, 1);\n    --excel-cell-separator: hsla(240, 5%, 13%, 1);\n    --excel-text-color: hsla(240, 5%, 74%, 1);\n    --outer-border-color: hsla(240, 5%, 12%, 1);\n\n    --data-cell-separator: hsla(240, 5%, 15%, 1);\n    --data-hover-bg: hsla(214, 82%, 51%, 0.1);\n    --data-active-bg: hsla(214, 82%, 31%, 0.3);\n  }\n\n  table.magic-table {\n    max-width: none;\n    border-collapse: collapse;\n    color: var(--color);\n    border: 1px solid var(--outer-border-color);\n    background: var(--background);\n    table-layout: fixed;\n\n    > thead {\n      > tr {\n        position: relative;\n        > th {\n          /* Header Row */\n          padding: var(--padding);\n          border-bottom: 1px solid var(--excel-cell-separator);\n          border-right: 1px solid var(--data-cell-separator);\n          text-align: left;\n          font-weight: 600;\n          &.etd {\n            aside {\n              input {\n                font-weight: 600;\n              }\n            }\n            output {\n              > em {\n                opacity: 0.2;\n                font-weight: normal;\n              }\n            }\n          }\n          &.excel {\n            text-align: center;\n            padding: var(--padding);\n            background: var(--excel-bg);\n            font-size: 11px;\n            color: var(--color);\n\n            width: var(--excel-col-width);\n            min-width: var(--excel-col-width);\n            max-width: var(--excel-col-width);\n            &.corner {\n              border: 1px solid var(--outer-border-color);\n              border-top-color: var(--excel-bg);\n              border-bottom: 3px solid var(--excel-cell-separator);\n              border-right: 3px solid var(--excel-cell-separator);\n            }\n          }\n        }\n        > td {\n          &.end-col {\n            width: var(--end-col-width);\n            min-width: var(--end-col-width);\n            max-width: var(--end-col-width);\n            border-bottom: 1px solid var(--excel-cell-separator);\n          }\n        }\n        &.excel-row {\n          > td {\n            text-align: center;\n            padding: var(--padding);\n            background: var(--excel-bg);\n            font-size: 11px;\n            color: var(--excel-text-color);\n            border: 1px solid var(--outer-border-color);\n            cursor: default;\n            &.corner {\n              width: 30px;\n              max-width: 30px;\n              border-bottom: 1px solid var(--excel-bg);\n              border-right: 3px solid var(--excel-cell-separator);\n            }\n            &:not(.corner) {\n              &:hover {\n                background: var(--excel-hover-bg);\n              }\n            }\n            &.end-col {\n              width: 20px;\n            }\n          }\n          &:last-of-type {\n            > td {\n              &.corner {\n                border-bottom: 3px solid var(--excel-cell-separator);\n              }\n            }\n          }\n        }\n        &.head-row {\n          > th {\n            padding: 0;\n          }\n        }\n      }\n    }\n    > tbody,\n    > tfoot {\n      > tr > .excel {\n      }\n      > tr > .excel {\n      }\n    }\n\n    > tbody {\n      .etd {\n        padding: 0;\n      }\n      > tr {\n        position: relative;\n        > td {\n          border-right: 1px solid var(--data-cell-separator);\n          border-bottom: 1px solid var(--data-cell-separator);\n        }\n        > .excel {\n          text-align: center;\n          cursor: default;\n          padding: var(--padding);\n          background: var(--excel-bg);\n          font-size: 11px;\n          font-weight: normal;\n          color: var(--excel-text-color);\n          border: 1px solid var(--outer-border-color);\n          border-right: 1px solid var(--excel-cell-separator);\n          --width: 32px;\n          width: var(--width);\n          min-width: var(--width);\n          max-width: var(--width);\n          &:hover {\n            background: var(--excel-hover-bg);\n          }\n        }\n      }\n      > tr > .excel {\n      }\n    }\n    .etd {\n      ${editableCellStyle}\n    }\n  }\n`\n","import React from 'react'\n\nimport QTable from './q-table'\nimport QContextWrapper from './q.context'\nimport Djit from './react-djit'\n\nimport { Wrapper } from './style'\n\nconst Main = (props) => {\n  return (\n    <Wrapper>\n      <Djit>\n        <QContextWrapper data={props.data} id={props.id || 'my-sheet'}>\n          <QTable />\n        </QContextWrapper>\n      </Djit>\n    </Wrapper>\n  )\n}\n\nexport default Main\n","import React from 'react'\n// import styles from './styles.module.css'\nimport Main from '../src/djitsheet'\n\nexport const ExampleComponent = ({ text }) => {\n  // return <div className={styles.test}>Example Component: {text}</div>\n  return <Main />\n}\n","import React from 'react'\n\nimport { ExampleComponent } from 'totaltestreactlibrary'\nimport 'totaltestreactlibrary/dist/index.css'\n\nconst App = () => {\n  return <ExampleComponent text=\"Create React Library Example 😄\" />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}